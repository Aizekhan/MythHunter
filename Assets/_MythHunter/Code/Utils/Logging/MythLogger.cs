using UnityEngine;
using System;
using System.Collections.Generic;
using System.Text;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;

namespace MythHunter.Utils.Logging
{
    

    /// <summary>
    /// –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ—Ç–æ–¥—ñ–≤, —â–æ –±—É–¥—É—Ç—å –≤—Å—Ç–∞–≤–ª—è—Ç–∏—Å—è –≤ –ª–æ–≥–∏ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –æ–±—Ä–æ–±–∫–∏
    /// </summary>
    public delegate string LogEnricher(Dictionary<string, object> properties);

    /// <summary>
    /// –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É MythHunter –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–æ–ª—å–æ—Ä—ñ–≤, –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
    /// </summary>
    public class MythLogger : IMythLogger
    {
        #region Fields and Properties

        private const string DEFAULT_CATEGORY = "General";
        private const string LOG_FILE_PREFIX = "mythgame_log_";
        private const string LOG_FILE_EXT = ".log";
        private const int MAX_LOG_FILES = 5;
        private const float MB = 1024 * 1024;
        private const float MAX_LOG_SIZE_MB = 10;

        // –°—Ç–∞—Ç–∏—á–Ω—ñ –∑–Ω–∞—á–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ª–æ–≥—ñ–≤
        private static readonly Dictionary<LogLevel, string> LogIcons = new Dictionary<LogLevel, string>
        {
            { LogLevel.Trace, "üîç" },
            { LogLevel.Debug, "üêû" },
            { LogLevel.Info, "‚ÑπÔ∏è" },
            { LogLevel.Warning, "‚ö†Ô∏è" },
            { LogLevel.Error, "‚ùå" },
            { LogLevel.Fatal, "‚ò†Ô∏è" }
        };

        // –°—Ç–∞—Ç–∏—á–Ω—ñ –∫–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ª–æ–≥—ñ–≤ (–∫–æ–ª—å–æ—Ä–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–ª—è Unity Console)
        private static readonly Dictionary<LogLevel, string> LogColors = new Dictionary<LogLevel, string>
        {
            { LogLevel.Trace, "#AAAAAA" },  // –°–≤—ñ—Ç–ª–æ-—Å—ñ—Ä–∏–π
            { LogLevel.Debug, "#DDDDDD" },  // –°—ñ—Ä–∏–π
            { LogLevel.Info, "#FFFFFF" },   // –ë—ñ–ª–∏–π
            { LogLevel.Warning, "#FFCC00" },// –ñ–æ–≤—Ç–∏–π
            { LogLevel.Error, "#FF6666" },  // –ß–µ—Ä–≤–æ–Ω–∏–π
            { LogLevel.Fatal, "#FF0000" }   // –Ø—Å–∫—Ä–∞–≤–æ-—á–µ—Ä–≤–æ–Ω–∏–π
        };

        // –ö–æ–ª–µ–∫—Ü—ñ—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ª–æ–≥—ñ–≤ –∑ —ó—Ö–Ω—ñ–º–∏ –Ω–∞–∑–≤–∞–º–∏ —Ç–∞ —è—Ä–ª–∏–∫–∞–º–∏
        private static readonly Dictionary<string, string> LogCategories = new Dictionary<string, string>
        {
            { "General", "üåê" },
            { "Network", "üåç" },
            { "Combat", "‚öîÔ∏è" },
            { "Movement", "üèÉ" },
            { "AI", "üß†" },
            { "UI", "üñ•Ô∏è" },
            { "Performance", "‚ö°" },
            { "Physics", "üîÑ" },
            { "Audio", "üîä" },
            { "Input", "üéÆ" },
            { "Resource", "üì¶" },
            { "Database", "üíæ" },
            { "Replay", "üìº" },
            { "Analytics", "üìä" },
            { "Phase", "‚è±Ô∏è" },
            { "Rune", "üîÆ" },
            { "Item", "üéí" },
            { "Character", "üë§" },
            { "Startup", "üöÄ" },
            { "Cloud", "‚òÅÔ∏è" }
        };

        // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è
        private LogLevel _minLogLevel;

        // –§–ª–∞–≥ –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        private bool _logToFile;

        // –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –ª–æ–≥—É
        private string _logFilePath;

        // –ó–±–∞–≥–∞—á—É–≤–∞—á—ñ –ª–æ–≥—É
        private List<LogEnricher> _enrichers = new List<LogEnricher>();

        // –ö–æ–Ω—Ç–µ–∫—Å—Ç –ª–æ–≥—É–≤–∞–Ω–Ω—è
        private Dictionary<string, object> _context = new Dictionary<string, object>();

        // –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        private string _defaultCategory = DEFAULT_CATEGORY;

        // –û–±'—î–∫—Ç –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É —É —Ñ–∞–π–ª
        private readonly object _fileLock = new object();

        #endregion

        #region Constructors

        /// <summary>
        /// –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä MythLogger
        /// </summary>
        /// <param name="minLogLevel">–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è</param>
        /// <param name="logToFile">–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–∏—Å–∞—Ç–∏ –ª–æ–≥–∏ —É —Ñ–∞–π–ª</param>
        /// <param name="defaultCategory">–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º</param>
        public MythLogger(LogLevel minLogLevel = LogLevel.Info, bool logToFile = false, string defaultCategory = DEFAULT_CATEGORY)
        {
            _minLogLevel = minLogLevel;
            _logToFile = logToFile;
            _defaultCategory = defaultCategory;

            if (logToFile)
            {
                InitializeFileLogging();
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// –õ–æ–≥—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        /// </summary>
        public void LogInfo(string message, string category = null)
        {
            Log(LogLevel.Info, message, category ?? _defaultCategory);
        }

        /// <summary>
        /// –õ–æ–≥—É—î –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
        /// </summary>
        public void LogWarning(string message, string category = null)
        {
            Log(LogLevel.Warning, message, category ?? _defaultCategory);
        }

        /// <summary>
        /// –õ–æ–≥—É—î –ø–æ–º–∏–ª–∫—É
        /// </summary>
        public void LogError(string message, string category = null, Exception exception = null)
{
    if (_minLogLevel <= LogLevel.Error)
    {
        string errorMsg = message;
        if (exception != null)
        {
            errorMsg += $"\nException: {exception.Message}";
            if (exception.StackTrace != null)
            {
                errorMsg += $"\nStackTrace: {exception.StackTrace}";
            }
        }
        Log(LogLevel.Error, errorMsg, category ?? _defaultCategory);
    }
}

        /// <summary>
        /// –õ–æ–≥—É—î —Ñ–∞—Ç–∞–ª—å–Ω—É –ø–æ–º–∏–ª–∫—É
        /// </summary>
        public void LogFatal(string message, string category = null)
        {
            Log(LogLevel.Fatal, message, category ?? _defaultCategory);
        }

        /// <summary>
        /// –õ–æ–≥—É—î –≤—ñ–¥–ª–∞–≥–æ–¥–∂—É–≤–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        /// </summary>
        public void LogDebug(string message, string category = null)
        {
            Log(LogLevel.Debug, message, category ?? _defaultCategory);
        }

        /// <summary>
        /// –õ–æ–≥—É—î —Ç—Ä–∞—Å—É–≤–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        /// </summary>
        public void LogTrace(string message, string category = null)
        {
            Log(LogLevel.Trace, message, category ?? _defaultCategory);
        }

        /// <summary>
        /// –ê—Å–æ—Ü—ñ—é—î –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ñ –¥–∞–Ω—ñ –∑ –ª–æ–≥–µ—Ä–æ–º
        /// </summary>
        public void WithContext(string key, object value)
        {
            if (_context.ContainsKey(key))
            {
                _context[key] = value;
            }
            else
            {
                _context.Add(key, value);
            }
        }

        /// <summary>
        /// –û—á–∏—â—É—î –≤—Å—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ñ –¥–∞–Ω—ñ
        /// </summary>
        public void ClearContext()
        {
            _context.Clear();
        }

        /// <summary>
        /// –î–æ–¥–∞—î –∑–±–∞–≥–∞—á—É–≤–∞—á –¥–æ –ª–æ–≥–µ—Ä–∞
        /// </summary>
        public void AddEnricher(LogEnricher enricher)
        {
            if (enricher != null && !_enrichers.Contains(enricher))
            {
                _enrichers.Add(enricher);
            }
        }

        /// <summary>
        /// –í–∏–¥–∞–ª—è—î –∑–±–∞–≥–∞—á—É–≤–∞—á –∑ –ª–æ–≥–µ—Ä–∞
        /// </summary>
        public void RemoveEnricher(LogEnricher enricher)
        {
            if (enricher != null)
            {
                _enrichers.Remove(enricher);
            }
        }

        /// <summary>
        /// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        /// </summary>
        public void SetDefaultCategory(string category)
        {
            _defaultCategory = !string.IsNullOrEmpty(category) ? category : DEFAULT_CATEGORY;
        }

        /// <summary>
        /// –ó–º—ñ–Ω—é—î –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è
        /// </summary>
        public void SetMinLogLevel(LogLevel level)
        {
            _minLogLevel = level;
        }

        /// <summary>
        /// –í–∫–ª—é—á–∞—î –∞–±–æ –≤–∏–∫–ª—é—á–∞—î —Ñ–∞–π–ª–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        /// </summary>
        public void EnableFileLogging(bool enable)
        {
            if (enable && !_logToFile)
            {
                _logToFile = true;
                InitializeFileLogging();
            }
            else if (!enable && _logToFile)
            {
                _logToFile = false;
            }
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        /// </summary>
        private void Log(
            LogLevel level,
            string message,
            string category,
            [CallerMemberName] string callerMember = "",
            [CallerFilePath] string callerFilePath = "",
            [CallerLineNumber] int callerLineNumber = 0
        )
        {
            if (level < _minLogLevel)
                return;

            string callerFile = Path.GetFileName(callerFilePath);

            // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –∑–±–∞–≥–∞—á—É–≤–∞—á—ñ–≤
            var properties = new Dictionary<string, object>(_context)
            {
                { "level", level },
                { "message", message },
                { "category", category },
                { "timestamp", DateTime.Now },
                { "caller", $"{callerFile}:{callerMember}:{callerLineNumber}" }
            };

            // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–±–∞–≥–∞—á—É–≤–∞—á—ñ–≤
            foreach (var enricher in _enrichers)
            {
                try
                {
                    string enrichment = enricher(properties);
                    if (!string.IsNullOrEmpty(enrichment))
                    {
                        message += " " + enrichment;
                    }
                }
                catch (Exception ex)
                {
                    string errorMsg = $"Error in log enricher: {ex.Message}";
                    UnityEngine.Debug.LogError(errorMsg);
                }
            }

            // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            string categoryIcon = GetCategoryIcon(category);

            // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–∫–∞ –¥–ª—è —Ä—ñ–≤–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
            string levelIcon = LogIcons.ContainsKey(level) ? LogIcons[level] : "";

            // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–∞—Å–æ–º, –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é, —Ä—ñ–≤–Ω–µ–º —Ç–∞ –∑–Ω–∞—á–∫–∞–º–∏
            string timeStr = DateTime.Now.ToString("HH:mm:ss.fff");
            string colorTag = GetColorTag(level);

            // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ª–æ–≥—É
            string fullMessage = $"{timeStr} {categoryIcon} {levelIcon} <b>[{category}]</b> {message}";

            // –Ø–∫—â–æ —î –¥–µ—Ç–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –¥–æ–¥–∞—Ç–∏ –π–æ–≥–æ
            if (properties.Count > 5) // –ë–∞–∑–æ–≤–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º—ñ—Å—Ç–∏—Ç—å 5 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
            {
                StringBuilder contextStr = new StringBuilder(" {");
                bool first = true;

                foreach (var kv in properties.Where(p =>
                   p.Key != "level" &&
                   p.Key != "message" &&
                   p.Key != "category" &&
                   p.Key != "timestamp" &&
                   p.Key != "caller"))
                {
                    if (!first)
                        contextStr.Append(", ");
                    first = false;

                    contextStr.Append($"{kv.Key}={FormatContextValue(kv.Value)}");
                }

                contextStr.Append("}");
                fullMessage += contextStr.ToString();
            }

            // –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤–∏–∫–ª–∏–∫ –¥–ª—è —Ä—ñ–≤–Ω—ñ–≤ Debug —Ç–∞ Trace
            if (level <= LogLevel.Debug)
            {
                fullMessage += $" [{callerFile}:{callerMember}():{callerLineNumber}]";
            }

            // –í–∏–≤–µ–¥–µ–Ω–Ω—è —É –∫–æ–Ω—Å–æ–ª—å Unity
            LogToUnityConsole(level, $"{colorTag}{fullMessage}</color>");

            // –í–∏–≤–µ–¥–µ–Ω–Ω—è —É —Ñ–∞–π–ª, —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ
            if (_logToFile)
            {
                LogToFile(level, $"{timeStr} [{level}] [{category}] {message}");
            }
        }

        /// <summary>
        /// –û—Ç—Ä–∏–º—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∑–Ω–∞—á–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ª–æ–≥—É
        /// </summary>
        private string GetCategoryIcon(string category)
        {
            return LogCategories.ContainsKey(category) ? LogCategories[category] : "üìù";
        }

        /// <summary>
        /// –ü–æ–≤–µ—Ä—Ç–∞—î —Ç–µ–≥ –∫–æ–ª—å–æ—Ä—É –¥–ª—è —Ä—ñ–≤–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
        /// </summary>
        private string GetColorTag(LogLevel level)
        {
            return LogColors.ContainsKey(level) ? $"<color={LogColors[level]}>" : "<color=white>";
        }

        /// <summary>
        /// –í–∏–≤–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –∫–æ–Ω—Å–æ–ª—å Unity –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º —Ä—ñ–≤–Ω–µ–º –ª–æ–≥—É–≤–∞–Ω–Ω—è
        /// </summary>
        private void LogToUnityConsole(LogLevel level, string message)
        {
            switch (level)
            {
                case LogLevel.Error:
                case LogLevel.Fatal:
                    UnityEngine.Debug.LogError(message);
                    break;
                case LogLevel.Warning:
                    UnityEngine.Debug.LogWarning(message);
                    break;
                default:
                    UnityEngine.Debug.Log(message);
                    break;
            }
        }

        /// <summary>
        /// –ó–∞–ø–∏—Å—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–∞–π–ª –ª–æ–≥—É
        /// </summary>
        private void LogToFile(LogLevel level, string message)
        {
            if (string.IsNullOrEmpty(_logFilePath))
                return;

            try
            {
                lock (_fileLock)
                {
                    File.AppendAllText(_logFilePath, message + Environment.NewLine);

                    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É
                    FileInfo logFile = new FileInfo(_logFilePath);
                    if (logFile.Length > MAX_LOG_SIZE_MB * MB)
                    {
                        RotateLogFiles();
                    }
                }
            }
            catch (Exception ex)
            {
                UnityEngine.Debug.LogError($"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –≤ —Ñ–∞–π–ª –ª–æ–≥—É: {ex.Message}");
                _logToFile = false;
            }
        }

        /// <summary>
        /// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ñ–∞–π–ª–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        /// </summary>
        private void InitializeFileLogging()
        {
            try
            {
                string logsDir = Path.Combine(Application.persistentDataPath, "Logs");

                if (!Directory.Exists(logsDir))
                {
                    Directory.CreateDirectory(logsDir);
                }

                // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É –ª–æ–≥—É –∑ –ø–æ—Ç–æ—á–Ω–æ—é –¥–∞—Ç–æ—é —Ç–∞ —á–∞—Å–æ–º
                string timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
                _logFilePath = Path.Combine(logsDir, $"{LOG_FILE_PREFIX}{timestamp}{LOG_FILE_EXT}");

                // –ó–∞–ø–∏—Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ª–æ–≥—É
                File.WriteAllText(_logFilePath, $"=== MythHunter Log Started at {DateTime.Now} ===\n" +
                    $"Application Version: {Application.version}\n" +
                    $"Unity Version: {Application.unityVersion}\n" +
                    $"Platform: {Application.platform}\n" +
                    $"System Language: {Application.systemLanguage}\n" +
                    $"Device Model: {SystemInfo.deviceModel}\n" +
                    $"Device Name: {SystemInfo.deviceName}\n" +
                    $"Operating System: {SystemInfo.operatingSystem}\n" +
                    $"Processor: {SystemInfo.processorType}\n" +
                    $"Memory: {SystemInfo.systemMemorySize} MB\n" +
                    $"Graphics Device: {SystemInfo.graphicsDeviceName}\n" +
                    $"Graphics Memory: {SystemInfo.graphicsMemorySize} MB\n" +
                    $"=== Log Entries ===\n\n");

                // –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ª–æ–≥—ñ–≤
                CleanupOldLogs(logsDir);
            }
            catch (Exception ex)
            {
                UnityEngine.Debug.LogError($"–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ñ–∞–π–ª–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è: {ex.Message}");
                _logToFile = false;
            }
        }

        /// <summary>
        /// –†–æ—Ç–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤ –ª–æ–≥—É –ø—Ä–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—ñ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
        /// </summary>
        private void RotateLogFiles()
        {
            try
            {
                string directory = Path.GetDirectoryName(_logFilePath);
                string fileNameWithoutExt = Path.GetFileNameWithoutExtension(_logFilePath);
                string extension = Path.GetExtension(_logFilePath);

                // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É –∑ –Ω–æ–º–µ—Ä–æ–º
                string timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
                string newLogPath = Path.Combine(directory, $"{fileNameWithoutExt}_{timestamp}{extension}");

                // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª—É —ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
                _logFilePath = newLogPath;

                // –ó–∞–ø–∏—Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —É –Ω–æ–≤–∏–π —Ñ–∞–π–ª
                File.WriteAllText(_logFilePath, $"=== MythHunter Log Continued at {DateTime.Now} ===\n\n");

                // –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ª–æ–≥—ñ–≤
                CleanupOldLogs(directory);
            }
            catch (Exception ex)
            {
                UnityEngine.Debug.LogError($"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ—Ç–∞—Ü—ñ—ó —Ñ–∞–π–ª—ñ–≤ –ª–æ–≥—É: {ex.Message}");
            }
        }

        /// <summary>
        /// –í–∏–¥–∞–ª—è—î —Å—Ç–∞—Ä—ñ —Ñ–∞–π–ª–∏ –ª–æ–≥—ñ–≤, –∑–∞–ª–∏—à–∞—é—á–∏ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ
        /// </summary>
        private void CleanupOldLogs(string directory)
        {
            try
            {
                DirectoryInfo di = new DirectoryInfo(directory);
                FileInfo[] logFiles = di.GetFiles($"{LOG_FILE_PREFIX}*{LOG_FILE_EXT}")
                                      .OrderByDescending(f => f.LastWriteTime)
                                      .ToArray();

                // –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ MAX_LOG_FILES —Ñ–∞–π–ª—ñ–≤
                for (int i = MAX_LOG_FILES; i < logFiles.Length; i++)
                {
                    logFiles[i].Delete();
                }
            }
            catch (Exception ex)
            {
                UnityEngine.Debug.LogError($"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Å—Ç–∞—Ä–∏—Ö –ª–æ–≥—ñ–≤: {ex.Message}");
            }
        }

        /// <summary>
        /// –§–æ—Ä–º–∞—Ç—É—î –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ª–æ–≥—É
        /// </summary>
        private string FormatContextValue(object value)
        {
            if (value == null)
                return "null";

            if (value is string)
                return $"\"{value}\"";

            if (value is DateTime dt)
                return dt.ToString("yyyy-MM-dd HH:mm:ss.fff");

            return value.ToString();
        }

        #endregion

        #region Static Methods

        /// <summary>
        /// –°—Ç–≤–æ—Ä—é—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ª–æ–≥–µ—Ä –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        /// </summary>
        public static MythLogger CreateDefaultLogger()
        {
            // –í —Ä–µ–∂–∏–º—ñ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π —Ä–µ–∂–∏–º –∑ —Ñ–∞–π–ª–æ–≤–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º
            if (Application.isEditor)
            {
                return new MythLogger(LogLevel.Debug, true, "General");
            }

            // –í —Ä–µ–ª—ñ–∑–Ω—ñ–π –∑–±—ñ—Ä—Ü—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±—ñ–ª—å—à –æ–±–º–µ–∂–µ–Ω–∏–π —Ä–µ–∂–∏–º
            bool isDevelopmentBuild = UnityEngine.Debug.isDebugBuild;
            LogLevel level = isDevelopmentBuild ? LogLevel.Info : LogLevel.Warning;
            bool logToFile = isDevelopmentBuild;

            return new MythLogger(level, logToFile, "General");
        }

        #endregion
    }

    /// <summary>
    /// –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ–≥–µ—Ä—ñ–≤ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    /// </summary>
    public static class MythLoggerFactory
    {
        private static IMythLogger _defaultLogger;
        private static Dictionary<string, IMythLogger> _loggers = new Dictionary<string, IMythLogger>();

        /// <summary>
        /// –°—Ç–≤–æ—Ä—é—î –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—î –ª–æ–≥–µ—Ä –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        /// </summary>
        public static IMythLogger GetDefaultLogger()
        {
            if (_defaultLogger == null)
            {
                _defaultLogger = MythLogger.CreateDefaultLogger();
            }

            return _defaultLogger;
        }

        /// <summary>
        /// –°—Ç–≤–æ—Ä—é—î –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—î –ª–æ–≥–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø—ñ–¥—Å–∏—Å—Ç–µ–º–∏
        /// </summary>
        public static IMythLogger GetLogger(string subsystem)
        {
            if (string.IsNullOrEmpty(subsystem))
            {
                return GetDefaultLogger();
            }

            if (!_loggers.TryGetValue(subsystem, out var logger))
            {
                logger = new MythLogger(defaultCategory: subsystem);
                _loggers[subsystem] = logger;
            }

            return logger;
        }

        /// <summary>
        /// –°—Ç–≤–æ—Ä—é—î —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ª–æ–≥–µ—Ä –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        /// </summary>
        public static IMythLogger CreateCustomLogger(LogLevel level, bool logToFile, string category)
        {
            return new MythLogger(level, logToFile, category);
        }
    }
}
