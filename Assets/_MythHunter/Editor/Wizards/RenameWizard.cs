using UnityEditor;
using UnityEngine;
using System.IO;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Linq;

/// <summary>
/// –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –º–∞—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –∫–ª–∞—Å—ñ–≤, —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–≤ —Ç–∞ —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ —É –ø—Ä–æ–µ–∫—Ç—ñ.
/// </summary>
public class RenameWizard : EditorWindow
{
    // –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    private string oldName = "IMythLogger";
    private string newName = "IMythLogger";
    private string searchPath = "Assets/_MythHunter";
    private bool includeInterfaces = true;
    private bool includeClasses = true;
    private bool includeMethodNames = false;
    private bool includeMemberNames = false;
    private bool includeInStringLiterals = false;
    private bool preserveCasing = true;
    private bool backupFiles = true;

    // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    private Vector2 scrollPosition;
    private bool showPreview = false;
    private Dictionary<string, RenamePreview> previewResults = new Dictionary<string, RenamePreview>();
    private List<string> filesToModify = new List<string>();
    private bool isProcessing = false;
    private int totalMatches = 0;
    private int filesWithMatches = 0;

    private string statusMessage = "";
    private MessageType statusMessageType = MessageType.None;

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø–æ—à—É–∫—É
    private string[] searchExtensions = { "*.cs", "*.asmdef", "*.asmref" };
    private string[] excludeFolders = { "Library", "Temp", "Logs", "obj" };

    [MenuItem("MythHunter Tools/Rename Wizard")]
    public static void ShowWindow()
    {
        GetWindow<RenameWizard>("Rename Wizard");
    }

    private void OnGUI()
    {
        EditorGUILayout.Space(10);
        EditorGUILayout.LabelField("üîÑ Rename Wizard", EditorStyles.boldLabel);
        EditorGUILayout.HelpBox("–¶–µ–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–æ–∑–≤–æ–ª—è—î –º–∞—Å–æ–≤–æ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤—É–≤–∞—Ç–∏ —Ç–∏–ø–∏ —É –≤—Å—å–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ.", MessageType.Info);

        EditorGUILayout.Space(10);

        // –û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        EditorGUILayout.LabelField("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É —Ç–∞ –∑–∞–º—ñ–Ω–∏", EditorStyles.boldLabel);

        oldName = EditorGUILayout.TextField("–°—Ç–∞—Ä–∞ –Ω–∞–∑–≤–∞:", oldName);
        newName = EditorGUILayout.TextField("–ù–æ–≤–∞ –Ω–∞–∑–≤–∞:", newName);

        EditorGUILayout.BeginHorizontal();
        searchPath = EditorGUILayout.TextField("–®–ª—è—Ö –¥–ª—è –ø–æ—à—É–∫—É:", searchPath);
        if (GUILayout.Button("...", GUILayout.Width(30)))
        {
            string path = EditorUtility.OpenFolderPanel("–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –¥–ª—è –ø–æ—à—É–∫—É", searchPath, "");
            if (!string.IsNullOrEmpty(path))
            {
                // –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ —à–ª—è—Ö—É –Ω–∞ –≤—ñ–¥–Ω–æ—Å–Ω–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É
                if (path.StartsWith(Application.dataPath))
                {
                    searchPath = "Assets" + path.Substring(Application.dataPath.Length);
                }
                else
                {
                    searchPath = path;
                }
            }
        }
        EditorGUILayout.EndHorizontal();

        EditorGUILayout.Space(5);

        // –û–ø—Ü—ñ—ó –ø–æ—à—É–∫—É
        EditorGUILayout.BeginVertical("box");
        EditorGUILayout.LabelField("–û–ø—Ü—ñ—ó –ø–æ—à—É–∫—É", EditorStyles.boldLabel);

        includeInterfaces = EditorGUILayout.Toggle("–®—É–∫–∞—Ç–∏ –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö", includeInterfaces);
        includeClasses = EditorGUILayout.Toggle("–®—É–∫–∞—Ç–∏ –≤ –∫–ª–∞—Å–∞—Ö", includeClasses);
        includeMethodNames = EditorGUILayout.Toggle("–®—É–∫–∞—Ç–∏ –≤ –Ω–∞–∑–≤–∞—Ö –º–µ—Ç–æ–¥—ñ–≤", includeMethodNames);
        includeMemberNames = EditorGUILayout.Toggle("–®—É–∫–∞—Ç–∏ –≤ –Ω–∞–∑–≤–∞—Ö –ø–æ–ª—ñ–≤/–≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π", includeMemberNames);
        includeInStringLiterals = EditorGUILayout.Toggle("–®—É–∫–∞—Ç–∏ –≤ —Ä—è–¥–∫–æ–≤–∏—Ö –ª—ñ—Ç–µ—Ä–∞–ª–∞—Ö", includeInStringLiterals);
        preserveCasing = EditorGUILayout.Toggle("–ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ä–µ–≥—ñ—Å—Ç—Ä –ø—Ä–∏ –∑–∞–º—ñ–Ω—ñ", preserveCasing);
        backupFiles = EditorGUILayout.Toggle("–°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó", backupFiles);

        EditorGUILayout.EndVertical();

        EditorGUILayout.Space(10);

        // –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å—É
        if (!string.IsNullOrEmpty(statusMessage))
        {
            EditorGUILayout.HelpBox(statusMessage, statusMessageType);
        }

        EditorGUILayout.BeginHorizontal();

        GUI.enabled = !isProcessing && !string.IsNullOrEmpty(oldName) && !string.IsNullOrEmpty(newName);

        if (GUILayout.Button("–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥", GUILayout.Height(30)))
        {
            PreviewReplace();
        }

        if (GUILayout.Button("–í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–º—ñ–Ω—É", GUILayout.Height(30)))
        {
            PerformReplacement();
        }

        GUI.enabled = true;

        EditorGUILayout.EndHorizontal();

        EditorGUILayout.Space(10);

        // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É
        if (showPreview && previewResults.Count > 0)
        {
            EditorGUILayout.LabelField($"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É (–∑–Ω–∞–π–¥–µ–Ω–æ {totalMatches} —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω—å —É {filesWithMatches} —Ñ–∞–π–ª–∞—Ö):", EditorStyles.boldLabel);

            scrollPosition = EditorGUILayout.BeginScrollView(scrollPosition, GUILayout.Height(300));

            foreach (var filePath in filesToModify)
            {
                var preview = previewResults[filePath];

                EditorGUILayout.BeginVertical("box");

                EditorGUILayout.BeginHorizontal();
                EditorGUILayout.LabelField(Path.GetFileName(filePath), EditorStyles.boldLabel);
                EditorGUILayout.LabelField($"{preview.MatchCount} —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω—å", GUILayout.Width(100));

                if (GUILayout.Button("–í—ñ–¥–∫—Ä–∏—Ç–∏", GUILayout.Width(80)))
                {
                    AssetDatabase.OpenAsset(AssetDatabase.LoadAssetAtPath<UnityEngine.Object>(filePath));
                }

                EditorGUILayout.EndHorizontal();

                EditorGUILayout.LabelField(filePath, EditorStyles.miniLabel);

                if (preview.MatchLines.Count > 0)
                {
                    foreach (var matchLine in preview.MatchLines.Take(5))
                    {
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField($"–†—è–¥–æ–∫ {matchLine.LineNumber}:", GUILayout.Width(80));
                        EditorGUILayout.TextField(matchLine.LineText);
                        EditorGUILayout.EndHorizontal();
                    }

                    if (preview.MatchLines.Count > 5)
                    {
                        EditorGUILayout.LabelField($"... —â–µ {preview.MatchLines.Count - 5} —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω—å", EditorStyles.miniLabel);
                    }
                }

                EditorGUILayout.EndVertical();

                EditorGUILayout.Space(5);
            }

            EditorGUILayout.EndScrollView();
        }
    }

    private void PreviewReplace()
    {
        if (string.IsNullOrEmpty(oldName) || string.IsNullOrEmpty(newName))
        {
            SetStatusMessage("–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ä—É —Ç–∞ –Ω–æ–≤—É –Ω–∞–∑–≤–∏", MessageType.Error);
            return;
        }

        isProcessing = true;
        try
        {
            previewResults.Clear();
            filesToModify.Clear();

            SetStatusMessage("–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ—à—É–∫ —Ñ–∞–π–ª—ñ–≤...", MessageType.Info);
            List<string> files = FindFiles(searchPath, searchExtensions, excludeFolders);

            SetStatusMessage($"–ê–Ω–∞–ª—ñ–∑—É—î—Ç—å—Å—è {files.Count} —Ñ–∞–π–ª—ñ–≤...", MessageType.Info);
            Regex searchPattern = BuildSearchPattern();

            totalMatches = 0;
            filesWithMatches = 0;

            foreach (var filePath in files)
            {
                RenamePreview preview = AnalyzeFile(filePath, searchPattern);

                if (preview.MatchCount > 0)
                {
                    previewResults[filePath] = preview;
                    filesToModify.Add(filePath);
                    totalMatches += preview.MatchCount;
                    filesWithMatches++;
                }

                // –î–æ–∑–≤–æ–ª—è—î —Ä–µ–¥–∞–∫—Ç–æ—Ä—É –æ–Ω–æ–≤–∏—Ç–∏—Å—å –ø—ñ–¥ —á–∞—Å –¥–æ–≤–≥–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó
                if (filesWithMatches % 50 == 0)
                {
                    EditorUtility.DisplayProgressBar("–ü–æ—à—É–∫ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω—å",
                        $"–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Ñ–∞–π–ª—ñ–≤: {files.IndexOf(filePath) + 1}/{files.Count}",
                        (float)(files.IndexOf(filePath) + 1) / files.Count);
                }
            }

            EditorUtility.ClearProgressBar();

            showPreview = true;

            if (filesWithMatches > 0)
            {
                SetStatusMessage($"–ó–Ω–∞–π–¥–µ–Ω–æ {totalMatches} —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω—å —É {filesWithMatches} —Ñ–∞–π–ª–∞—Ö.", MessageType.Info);
            }
            else
            {
                SetStatusMessage("–°–ø—ñ–≤–ø–∞–¥—ñ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", MessageType.Warning);
            }
        }
        catch (System.Exception ex)
        {
            Debug.LogError($"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –ø–µ—Ä–µ–≥–ª—è–¥—ñ: {ex.Message}");
            SetStatusMessage($"–ü–æ–º–∏–ª–∫–∞: {ex.Message}", MessageType.Error);
        }
        finally
        {
            isProcessing = false;
            EditorUtility.ClearProgressBar();
        }
    }

    private void PerformReplacement()
    {
        if (!showPreview || filesToModify.Count == 0)
        {
            PreviewReplace();
            if (filesToModify.Count == 0)
            {
                return;
            }
        }

        if (!EditorUtility.DisplayDialog("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º—ñ–Ω–∏",
            $"–í–∏ –∑–±–∏—Ä–∞—î—Ç–µ—Å—å –∑–∞–º—ñ–Ω–∏—Ç–∏ '{oldName}' –Ω–∞ '{newName}' —É {filesToModify.Count} —Ñ–∞–π–ª–∞—Ö. –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?",
            "–¢–∞–∫", "–°–∫–∞—Å—É–≤–∞—Ç–∏"))
        {
            return;
        }

        isProcessing = true;
        int modifiedFiles = 0;

        try
        {
            foreach (var filePath in filesToModify)
            {
                EditorUtility.DisplayProgressBar("–ó–∞–º—ñ–Ω–∞ —Ç–µ–∫—Å—Ç—É",
                    $"–û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É {modifiedFiles + 1}/{filesToModify.Count}: {Path.GetFileName(filePath)}",
                    (float)(modifiedFiles + 1) / filesToModify.Count);

                ReplaceInFile(filePath);
                modifiedFiles++;
            }

            AssetDatabase.Refresh();

            SetStatusMessage($"–£—Å–ø—ñ—à–Ω–æ –º–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ {modifiedFiles} —Ñ–∞–π–ª—ñ–≤.", MessageType.Info);
        }
        catch (System.Exception ex)
        {
            Debug.LogError($"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–º—ñ–Ω—ñ: {ex.Message}");
            SetStatusMessage($"–ü–æ–º–∏–ª–∫–∞: {ex.Message}", MessageType.Error);
        }
        finally
        {
            isProcessing = false;
            EditorUtility.ClearProgressBar();
        }
    }

    private List<string> FindFiles(string rootPath, string[] extensions, string[] excludeFolders)
    {
        List<string> files = new List<string>();

        if (!Directory.Exists(rootPath))
        {
            Debug.LogWarning($"–®–ª—è—Ö –Ω–µ —ñ—Å–Ω—É—î: {rootPath}");
            return files;
        }

        foreach (string extension in extensions)
        {
            string[] foundFiles = Directory.GetFiles(rootPath, extension, SearchOption.AllDirectories);

            foreach (string file in foundFiles)
            {
                string relativePath = file.Replace("\\", "/");
                bool shouldExclude = false;

                foreach (string excludeFolder in excludeFolders)
                {
                    if (relativePath.Contains($"/{excludeFolder}/") || relativePath.StartsWith($"{excludeFolder}/"))
                    {
                        shouldExclude = true;
                        break;
                    }
                }

                if (!shouldExclude)
                {
                    files.Add(relativePath);
                }
            }
        }

        return files;
    }

    private Regex BuildSearchPattern()
    {
        List<string> patterns = new List<string>();

        // –ü–æ—à—É–∫ —Ç–∏–ø—ñ–≤ (—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–≤ —ñ –∫–ª–∞—Å—ñ–≤)
        if (includeInterfaces || includeClasses)
        {
            // –ü–æ—à—É–∫ –≤ –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—ó —Ç–∏–ø—ñ–≤ (class MyClass, interface IMyInterface)
            patterns.Add($@"(class|interface|struct|enum)\s+({oldName})");

            // –ü–æ—à—É–∫ —É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ —Ç–∏–ø—ñ–≤ (MyClass variable, List<IMyInterface>)
            patterns.Add($@"(\b)({oldName})(\b|[<,>\[\]\s\(\)\{{}}])");

            // –ü–æ—à—É–∫ —É —Å–ø–∞–¥–∫—É–≤–∞–Ω–Ω—ñ —Ç–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–≤ (: BaseClass, IMyInterface)
            patterns.Add($@":\s*([\w\s,<>]*\s)?({oldName})(\s|,|<|>|\{{)");
            patterns.Add($@",\s*({oldName})(\s|,|<|>|\{{)");
        }

        // –ü–æ—à—É–∫ –Ω–∞–∑–≤ –º–µ—Ç–æ–¥—ñ–≤
        if (includeMethodNames)
        {
            patterns.Add($@"(\b)({oldName})(\s*\()");
        }

        // –ü–æ—à—É–∫ –Ω–∞–∑–≤ –ø–æ–ª—ñ–≤ —ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π
        if (includeMemberNames)
        {
            patterns.Add($@"(\s|\t|;|=|\()({oldName})(\s|;|=|,|\)|<|>|\[)");
        }

        // –ü–æ—à—É–∫ —É —Ä—è–¥–∫–æ–≤–∏—Ö –ª—ñ—Ç–µ—Ä–∞–ª–∞—Ö
        if (includeInStringLiterals)
        {
            patterns.Add($@"(\""[^""]*?){oldName}([^""]*\"")");
        }

        // –û–±'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö —à–∞–±–ª–æ–Ω—ñ–≤ –∑ OR
        string finalPattern = string.Join("|", patterns);

        return new Regex(finalPattern, RegexOptions.Multiline);
    }

    private RenamePreview AnalyzeFile(string filePath, Regex searchPattern)
    {
        RenamePreview preview = new RenamePreview();
        string content = File.ReadAllText(filePath);

        // –ü–æ—à—É–∫ –≤—Å—ñ—Ö —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω—å —É —Ñ–∞–π–ª—ñ
        MatchCollection matches = searchPattern.Matches(content);

        if (matches.Count > 0)
        {
            preview.MatchCount = matches.Count;

            // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –∑ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è–º–∏
            string[] lines = content.Split('\n');

            foreach (Match match in matches)
            {
                // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ä—è–¥–∫–∞ –¥–ª—è —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
                int lineNumber = 1;
                int charPosition = 0;

                for (int i = 0; i < lines.Length; i++)
                {
                    int lineLength = lines[i].Length + 1; // +1 –¥–ª—è —Å–∏–º–≤–æ–ª—É –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞

                    if (charPosition + lineLength > match.Index)
                    {
                        lineNumber = i + 1;
                        string line = lines[i];

                        // –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
                        preview.MatchLines.Add(new MatchLine
                        {
                            LineNumber = lineNumber,
                            LineText = line.TrimEnd()
                        });

                        break;
                    }

                    charPosition += lineLength;
                }
            }
        }

        return preview;
    }

    private void ReplaceInFile(string filePath)
    {
        try
        {
            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó —Ñ–∞–π–ª—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if (backupFiles)
            {
                string backupPath = filePath + ".bak";
                File.Copy(filePath, backupPath, true);
            }

            string content = File.ReadAllText(filePath);

            if (preserveCasing)
            {
                // –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ä–µ–≥—ñ—Å—Ç—Ä –ø—Ä–∏ –∑–∞–º—ñ–Ω—ñ (IMythLogger -> IMythLogger, iLogger -> iMythLogger)
                content = PreserveCasingReplace(content, oldName, newName);
            }
            else
            {
                // –ü—Ä—è–º–∞ –∑–∞–º—ñ–Ω–∞
                content = ReplaceWithRegex(content, oldName, newName);
            }

            File.WriteAllText(filePath, content);
        }
        catch (System.Exception ex)
        {
            Debug.LogError($"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–º—ñ–Ω—ñ —É —Ñ–∞–π–ª—ñ {filePath}: {ex.Message}");
            throw;
        }
    }

    private string PreserveCasingReplace(string content, string oldName, string newName)
    {
        // –ü–æ—à—É–∫ –≤—Å—ñ—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è oldName
        List<string> variants = new List<string> {
            oldName,                            // –Ø–∫ —î
            oldName.ToLower(),                  // –ù–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä
            oldName.ToUpper(),                  // –í–µ—Ä—Ö–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä
            char.ToLower(oldName[0]) + oldName.Substring(1), // camelCase
            char.ToUpper(oldName[0]) + oldName.Substring(1)  // PascalCase
        };

        foreach (string variant in variants.Distinct())
        {
            // –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –Ω–∞–∑–≤–∏ –∑–∞ —Ç–∏–º —Å–∞–º–∏–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–º
            string newVariant = newName;

            if (variant == oldName.ToLower())
            {
                newVariant = newName.ToLower();
            }
            else if (variant == oldName.ToUpper())
            {
                newVariant = newName.ToUpper();
            }
            else if (char.IsLower(variant[0]))
            {
                newVariant = char.ToLower(newName[0]) + newName.Substring(1);
            }
            else if (char.IsUpper(variant[0]))
            {
                newVariant = char.ToUpper(newName[0]) + newName.Substring(1);
            }

            content = ReplaceWithRegex(content, variant, newVariant);
        }

        return content;
    }

    private string ReplaceWithRegex(string content, string oldText, string newText)
    {
        // –†–æ–∑—É–º–Ω–∞ –∑–∞–º—ñ–Ω–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        Regex regex = new Regex($@"(\b|_){Regex.Escape(oldText)}(\b|[<,>\[\]\s\(\)\{{}}_])");

        content = regex.Replace(content, m => {
            string prefix = m.Groups[1].Value;
            string suffix = m.Groups[2].Value;
            return prefix + newText + suffix;
        });

        return content;
    }

    private void SetStatusMessage(string message, MessageType type)
    {
        statusMessage = message;
        statusMessageType = type;
        Repaint();
    }
}

/// <summary>
/// –ö–ª–∞—Å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑–º—ñ–Ω–∏
/// </summary>
public class RenamePreview
{
    public int MatchCount
    {
        get; set;
    }
    public List<MatchLine> MatchLines { get; set; } = new List<MatchLine>();
}

/// <summary>
/// –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä—è–¥–æ–∫ –∑ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è–º
/// </summary>
public class MatchLine
{
    public int LineNumber
    {
        get; set;
    }
    public string LineText
    {
        get; set;
    }
}
